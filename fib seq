// C++ Program to find even indexed 
// Fibonacci Sum in O(Log n) time.
#include <bits/stdc++.h>
using namespace std;

const int MAX = 1000;

// Create an array for memoization
int f[MAX] = { 0 };

// Returns n'th Fibonacci number
// using table f[]
int fib(int n)
{
	// Base cases
	if (n == 0)
		return 0;
	if (n == 1 || n == 2)
		return (f[n] = 1);

	// If fib(n) is already computed
	if (f[n])
		return f[n];

	int k = ((n & 1) ? (n + 1) / 2 : 
			n / 2);

	// Applying above formula [Note value 
	// n&1 is 1 if n is odd, else 0].
	f[n] = (n & 1) ? (fib(k) * fib(k) + 
					fib(k - 1) * fib(k - 1)) : 
					(2 * fib(k - 1) + fib(k)) * 
					fib(k);

	return f[n];
}

// Computes value of even-indexed 
// Fibonacci Sum
int calculateEvenSum(int n)
{
	return (fib(2 * n + 1) - 1);
}

// Driver code
int main()
{
	// Get n
	int n = 8;

	// Find the alternating sum
	cout << "Even indexed Fibonacci Sum upto " << 
			n << " terms: " << calculateEvenSum(n) << 
			endl;

	return 0;
}
